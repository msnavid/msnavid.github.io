?datadrivencv::use_datadriven_cv
setwd("~/Samran/website_msnavid/msnavid.github.io/CV")
library(datadrivencv)
use_datadriven_cv(
full_name = "M Samran Navid",
data_location = "https://docs.google.com/spreadsheets/d/1JgYJPPIzySyxy-wj-C1hYkiYu8qPouSJm9K3RJxw-l0",
pdf_location = "/Users/msnavid/Samran/website_msnavid/msnavid.github.io/files/cv/cv_msnavid.pdf",
html_location = "/Users/msnavid/Samran/website_msnavid/msnavid.github.io/_pages/",
source_location = "https://github.com/nstrayer/cv",
open_files = FALSE
)
source('render_cv.r')
source('render_cv.r')
source('render_cv.r')
?invisible
setwd("~/Samran/website_msnavid/msnavid.github.io/CV2")
pagedown::chrome_print(input = cv.html,
output = "cv.pdf")
setwd("~/Samran/website_msnavid/msnavid.github.io/CV2")
pagedown::chrome_print(input = cv.html,
output = "cv.pdf")
pagedown::chrome_print(input = cv,
output = "cv.pdf")
pagedown::chrome_print(input = cv.Rmd,
output = "cv.pdf")
fs::file_temp(ext = ".html")
fs::file_temp(ext = ".html")
??chrome_print
pagedown::chrome_print(input = cv.Rmd, output = "cv.pdf")
pagedown::chrome_print(input = 'cv.Rmd', output = "cv.pdf")
pagedown::chrome_print(input = 'cv.html', output = "cv2.pdf")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = 'cv2.html)
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = 'cv2.html')
pagedown::chrome_print(input = 'cv2.html', output = "cv2.pdf")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = 'cv2.html')
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = 'cv2.html')
pagedown::chrome_print(input = 'cv2.html', output = "cv2.pdf")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = 'cv2.html')
pagedown::chrome_print(input = 'cv2.html', output = "cv2.pdf")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = 'cv2.html')
pagedown::chrome_print(input = 'cv2.html', output = "cv2.pdf")
capabilities()
install.packages("kableExtra")
col1 <- 'Contact details'
col2 <- c ('email',
'phone',
'link')
col3 <- c ('samranasghar@gmail.com',
'+31(0)616084635',
'msnavid.com')
col4 <- c ('github',
'linkedin',
'orcid')
col5 <- c ('gihub.com/msnavid',
'linkedin/in/msnavid',
'orcid.org/0000-0002-2849-874X')
df <- data.frame(col1,
col2,
col3,
col4,
col5)
View(df)
col1 <- c('Contact details',
NA,
NA)
col2 <- c ('email',
'phone',
'link')
col3 <- c ('samranasghar@gmail.com',
'+31(0)616084635',
'msnavid.com')
col4 <- c ('github',
'linkedin',
'orcid')
col5 <- c ('gihub.com/msnavid',
'linkedin/in/msnavid',
'orcid.org/0000-0002-2849-874X')
df <- data.frame(col1,
col2,
col3,
col4,
col5)
View(df)
?paste
paste0('\fa', col2)
col1 <- c('Contact details',
NA,
NA)
col2 <- c ('email',
'phone',
'link')
col3 <- c ('samranasghar@gmail.com',
'+31(0)616084635',
'msnavid.com')
col4 <- c ('github',
'linkedin',
'orcid')
col5 <- c ('gihub.com/msnavid',
'linkedin/in/msnavid',
'orcid.org/0000-0002-2849-874X')
col2 <- paste0 ('\fa', col2)
col4 <- paste0 ('\fa', col4)
df <- data.frame(col1,
col2,
col3,
col4,
col5)
kableExtra::kable(df)
kableExtra::kbl(df)
col1 <- c('Contact details',
NA,
NA)
col2 <- c ('email',
'phone',
'link')
col3 <- c ('samranasghar@gmail.com',
'+31(0)616084635',
'msnavid.com')
col4 <- c ('github',
'linkedin',
'orcid')
col5 <- c ('gihub.com/msnavid',
'linkedin/in/msnavid',
'orcid.org/0000-0002-2849-874X')
col2 <- paste0 ('\\fa', col2)
col4 <- paste0 ('\\fa', col4)
df <- data.frame(col1,
col2,
col3,
col4,
col5)
kableExtra::kbl(df)
source ('personal_info.R')
nrow(col2)
ncol(col2)
size)col2
size(col2)
length(col2)
col2[1]
col1 <- c('Contact details',
NA,
NA)
col2 <- c ('envelope',
'phone',
'link')
col3 <- c ('samranasghar@gmail.com',
'+31(0)616084635',
'msnavid.com')
col4 <- c ('github',
'linkedin',
'orcid')
col5 <- c ('gihub.com/msnavid',
'linkedin/in/msnavid',
'orcid.org/0000-0002-2849-874X')
for (i in 1:length(col2)) {
col2[i] <- as.character(fa(col2[i]))
}
for (i in 1:length(col4)) {
col4[i] <- as.character(fa(col4[i]))
}
fontawesome::fa('linkedin')
paste0("<a href=\"", link_location, "\">", as.character(fa(logo)), "</a>")
addLink <- function(link_location, logo) {
paste0("<a href=\"", link_location, "\">", as.character(fa(logo)), "</a>")
}
col1 <- c('Contact details',
NA,
NA)
col2 <- c ('envelope',
'phone',
'link')
col3 <- c ('samranasghar@gmail.com',
'+31(0)616084635',
'msnavid.com')
col4 <- c ('github',
'linkedin',
'orcid')
col5 <- c ('gihub.com/msnavid',
'linkedin/in/msnavid',
'orcid.org/0000-0002-2849-874X')
for (i in 1:length(col2)) {
col2[i] <- addLink(col3[i], col2[i])
}
library(fontawesome)
for (i in 1:length(col2)) {
col2[i] <- addLink(col3[i], col2[i])
}
for (i in 1:length(col4)) {
col4[i] <- addLink(col5[i], col4[i])
}
?knitr::kable
?kbl
library(icon)
install.packages('icon')
devtools::install_github("ropenscilabs/icon")
install.packages('devtools')
devtools::install_github("ropenscilabs/icon")
icon::fa_rocket(colour = "#1FA67A")
devtools::install_github("ropenscilabs/icon")
`r  icon::fa("rocket")`
remotes::install_github("mitchelloharawild/icons")
remotes::install_github("mitchelloharawild/icons", force = TRUE)
library(icons)
download_fontawesome()
install.packages('rsvg')
addLink <- function(link_location, logo) {
paste0("<a href=\"", link_location, "\">", fontawesome(logo), "</a>")
}
col1 <- c('Contact details',
NA,
NA)
col2 <- c ('envelope',
'phone',
'link')
col3 <- c ('samranasghar@gmail.com',
'+31(0)616084635',
'msnavid.com')
col4 <- c ('github',
'linkedin',
'orcid')
col5 <- c ('gihub.com/msnavid',
'linkedin/in/msnavid',
'orcid.org/0000-0002-2849-874X')
for (i in 1:length(col2)) {
col2[i] <- addLink(col3[i], col2[i])
}
col2[1]
col2 <- c ('envelope',
'phone',
'link')
col3 <- c ('samranasghar@gmail.com',
'+31(0)616084635',
'msnavid.com')
col4 <- c ('github',
'linkedin',
'orcid')
col5 <- c ('gihub.com/msnavid',
'linkedin/in/msnavid',
'orcid.org/0000-0002-2849-874X')
for (i in 1:length(col2)) {
col2[i] <- icons::fontawesome(col2[i])
}
col2[i] <- icons::fontawesome(col2[i])
col2 <- c ('envelope',
'phone',
'link')
col2[i] <- icons::fontawesome(col2[i])
col2 <- c ('envelope',
'phone',
'link')
col7[i] <- icons::fontawesome(col2[i])
col7 <- icons::fontawesome(col2[i])
co2_tmp <- list()
for (i in 1:length(col2)) {
col2_tmp[i] <- icons::fontawesome(col2[i])
}
co2_tmp <- list()
col2_tmp <- list()
for (i in 1:length(col2)) {
col2_tmp[i] <- icons::fontawesome(col2[i])
}
col2_tmp <- ''
for (i in 1:length(col2)) {
col2_tmp[i] <- icons::fontawesome(col2[i])
}
col2_tmp <- list(3)
for (i in 1:length(col2)) {
col2_tmp[i] <- icons::fontawesome(col2[i])
}
col2_tmp <- icons::fontawesome(col2[i])
df <- data.frame(col1,
col2,
col3,
col4,
col5,
col_tmp)
df <- data.frame(col1,
col2,
col3,
col4,
col5,
col2_tmp)
col2_tmp
col2[i] <- as.data.frame(do.call(cbind, col2_tmp))
col1 <- c('Contact details',
NA,
NA)
col2 <- c ('envelope',
'phone',
'link')
col3 <- c ('samranasghar@gmail.com',
'+31(0)616084635',
'msnavid.com')
col4 <- c ('github',
'linkedin',
'orcid')
col5 <- c ('gihub.com/msnavid',
'linkedin/in/msnavid',
'orcid.org/0000-0002-2849-874X')
col2_tmp <- list(3)
for (i in 1:length(col2)) {
col2_tmp <- icons::fontawesome(col2[i])
col2[i] <- as.data.frame(do.call(cbind, col2_tmp))
}
col2_tmp <- icons::fontawesome(col2[i])
col2_tmp <- as.data.frame(do.call(cbind, col2_tmp))
View(col2_tmp)
knitr::opts_chunk$set(echo = TRUE)
# library(icons)
library(kableExtra)
source ('cv_printing_functions.r')
# Curriculum Vitae \hfill (Last update: `r format(Sys.time(), '%B %d, %Y')`)
\begin{center}
\begin{tabular}{p{55mm} p{45mm} p{57mm}}
% Line 1
\faEnvelope \hspace{1mm} samranasghar@gmail.com &
\faGithub \hspace{1mm} github.com/msnavid &
\hfill \textcolor{color_orcid}{\faOrcid}  \hspace{1mm} orcid.org/0000-0002-2849-874X \\
% Line 2
\faLink \hspace{1mm} msnavid.com &
\textcolor{color_linkedin}{\faLinkedin} \hspace{1mm} linkedin.com/in/msnavid \\
% Line 3
\faPhone \hspace{1mm} +31 (0) 616 084 645 \\
\end{tabular}
\end{center}
``` {r personal_info}
CV <- create_CV_object()
CV <- create_CV_object()
source ('cv_printing_functions.r')
CV <- create_CV_object()
source ('cv_printing_functions.r')
CV <- create_CV_object()
source ('cv_printing_functions.r')
CV <- create_CV_object()
cv <- list(
pdf_mode = pdf_mode,
links = c()
)
data_location,
pdf_mode = FALSE,
sheet_is_publicly_readable = TRUE
pdf_mode = FALSE,
sheet_is_publicly_readable = TRUE
pdf_mode = FALSE
sheet_is_publicly_readable = TRUE
cv <- list(
pdf_mode = pdf_mode,
links = c()
)
cv$entries_data <- readxl::read_excel("msnavid_cv_data.xlsx", sheet = "entries", skip = 1)
View(cv)
extract_year <- function(dates){
date_year <- stringr::str_extract(dates, "(20|19)[0-9]{2}")
date_year[is.na(date_year)] <- lubridate::year(lubridate::ymd(Sys.Date())) + 10
date_year
}
parse_dates <- function(dates){
date_month <- stringr::str_extract(dates, "(\\w+|\\d+)(?=(\\s|\\/|-)(20|19)[0-9]{2})")
date_month[is.na(date_month)] <- "1"
paste("1", date_month, extract_year(dates), sep = "-") %>%
lubridate::dmy()
}
# Clean up entries dataframe to format we need it for printing
cv$entries_data %<>%
tidyr::unite(
tidyr::starts_with('description'),
col = "description_bullets",
sep = "\n- ",
na.rm = TRUE
) %>%
dplyr::mutate(
description_bullets = ifelse(description_bullets != "", paste0("- ", description_bullets), ""),
start = ifelse(start == "NULL", NA, start),
end = ifelse(end == "NULL", NA, end),
start_year = extract_year(start),
end_year = extract_year(end),
no_start = is.na(start),
has_start = !no_start,
no_end = is.na(end),
has_end = !no_end,
timeline = dplyr::case_when(
no_start  & no_end  ~ "N/A",
no_start  & has_end ~ as.character(end),
has_start & no_end  ~ paste("Current", "-", start),
TRUE                ~ paste(end, "-", start)
)
) %>%
dplyr::arrange(desc(parse_dates(end))) %>%
dplyr::mutate_all(~ ifelse(is.na(.), 'N/A', .))
# Clean up entries dataframe to format we need it for printing
cv$entries_data %<>%
tidyr::unite(
tidyr::starts_with('description'),
col = "description_bullets",
sep = "\n- ",
na.rm = TRUE
) %>%
dplyr::mutate(
description_bullets = ifelse(description_bullets != "", paste0("- ", description_bullets), ""),
# start = ifelse(start == "NULL", NA, start),
# end = ifelse(end == "NULL", NA, end),
start_year = extract_year(start),
end_year = extract_year(end),
no_start = is.na(start),
has_start = !no_start,
no_end = is.na(end),
has_end = !no_end,
timeline = dplyr::case_when(
no_start  & no_end  ~ "N/A",
no_start  & has_end ~ as.character(end),
has_start & no_end  ~ paste("Current", "-", start),
TRUE                ~ paste(end, "-", start)
)
) %>%
dplyr::arrange(desc(parse_dates(end))) %>%
dplyr::mutate_all(~ ifelse(is.na(.), 'N/A', .))
View(cv)
?ifelse
cv$entries_data$start
as.date(cv$entries_data$start)
as.Date(cv$entries_data$start)
as.Date(cv$entries_data$start[1])
?as.Date
cv$entries_data <- readxl::read_excel("msnavid_cv_data.xlsx", sheet = "entries", skip = 1)
as.Date(cv$entries_data$start[1])
as.Date(cv$entries_data$start[2])
as.Date(cv$entries_data$start[3])
as.Date(cv$entries_data$start[4])
as.Date(cv$entries_data$start[5])
as.Date(cv$entries_data$start[6])
# Clean up entries dataframe to format we need it for printing
cv$entries_data %<>%
tidyr::unite(
tidyr::starts_with('description'),
col = "description_bullets",
sep = "\n- ",
na.rm = TRUE
) %>%
dplyr::mutate(
description_bullets = ifelse(description_bullets != "", paste0("- ", description_bullets), ""),
start = ifelse(start == "NULL", NA, start),
end = ifelse(end == "NULL", NA, end),
start_year = extract_year(start),
end_year = extract_year(end),
no_start = is.na(start),
has_start = !no_start,
no_end = is.na(end),
has_end = !no_end,
timeline = dplyr::case_when(
no_start  & no_end  ~ "N/A",
no_start  & has_end ~ as.character(end),
has_start & no_end  ~ paste("Current", "-", start),
TRUE                ~ paste(end, "-", start)
)
) %>%
dplyr::arrange(desc(parse_dates(end))) %>%
dplyr::mutate_all(~ ifelse(is.na(.), 'N/A', .))
# Clean up entries dataframe to format we need it for printing
cv$entries_data %<>%
tidyr::unite(
tidyr::starts_with('description'),
col = "description_bullets",
sep = "\n- ",
na.rm = TRUE
) %>%
dplyr::mutate(
description_bullets = ifelse(description_bullets != "", paste0("- ", description_bullets), ""),
# start = ifelse(start == "NULL", NA, start),
# end = ifelse(end == "NULL", NA, end),
start_year = extract_year(start),
end_year = extract_year(end),
no_start = is.na(start),
has_start = !no_start,
no_end = is.na(end),
has_end = !no_end,
timeline = dplyr::case_when(
no_start  & no_end  ~ "N/A",
no_start  & has_end ~ as.character(end),
has_start & no_end  ~ paste("Current", "-", start),
TRUE                ~ paste(end, "-", start)
)
) %>%
dplyr::arrange(desc(parse_dates(end))) %>%
dplyr::mutate_all(~ ifelse(is.na(.), 'N/A', .))
cv
View(cv)
?stringr::str_extract
install.packages('janitor')
cv$entries_data <- readxl::read_excel("msnavid_cv_data.xlsx", sheet = "entries", skip = 1)
janitor::excel_numeric_to_date(cv$entries_data$start)
janitor::excel_numeric_to_date(cv$entries_data$end)
janitor::excel_numeric_to_date(cv$entries_data$start[1])
x <- cv$entries_data$start[1]
janitor::excel_numeric_to_date(x)
lubridate::year(lubridate::ymd(Sys.Date()))
lubridate::year(lubridate::ymd(Sys.Date())) + 10
x <- cv$entries_data$start
janitor::excel_numeric_to_date(x)
y <- as.Date(x)
y
